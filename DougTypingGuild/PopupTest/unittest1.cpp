#include "stdafx.h"
#include "CppUnitTest.h"
#include "..\Popup.h"
#include "..\Popup.cpp"


using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace PopupTest
{		
	TEST_CLASS(UnitTest1)
	{
	public:
		TEST_METHOD(IsActiveTest)
		{
			Popup test("something");
			Assert::IsTrue(test.IsActive());
			test.IncrTicks();
			test.IncrTicks();
			test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks(); test.IncrTicks();
			test.IncrTicks();

			Assert::IsFalse(test.IsActive());
		}
		TEST_METHOD(IncrTicksTest)
		{
			Popup test("something");
			test.IncrTicks();
			Assert::AreEqual(1, test.getTicks());
		}
	};
}